What is Javascript
Javascript is a versatile and widely used programming language that plays a crucial role in web development. It enables developers to create interactive and dynamic elements within web pages enhancing the user experience by adding functionality that responds to the user actions.
Javascript is primarily executed in web browser, but its also used in other environments like server-side scripting through Node.js

Variables: used as a container in memory to store data-types/values.

Primitive Data Type
1. Number: used to represent integer values and floating point number

We can perform mathematical operations on number data-type.
Arithmetic operations like addition '+' , subtraction '-', division '/', multiplication '*', modulo (remainder after a division) '%', exponential '**'
increment and decrement operator (adds by 1) ++,(subtract by 1) --

2. Booleans: booleans are represented by true or false, in some cases 0 (off) or 1 (on).

truthy and falsy values related to boolean
true, 1, object {}, array []
false, undefined, null, empty quotes( '', "", `` ), -0, 0, NaN

Comparison Operators
comparison operators either return true or false after operating on the values or operands
Relational operators
greater than >
less than <
greater than or less than >=
less than or equal than <=
Equality operators
loosely equal to == (checks for value and also does type coercion)
strictly equal to === (ensure for value and data type to be strictly the same and does NOT do type coercion)
not equal to ! (negates true to be false and false to be true)
loosely NOT equal to != (does not check for value and also does type coercion)
strictly NOT equal to !== (does check for strictly equal value and data type and does not do type coercion)

3. Strings this is used to represent a character or set of characters also known as text
single quote 'single quotes string'
double quotes "double quotes"
backtick quotes `backtick quotes` 

Type conversion
we can convert some data type like string to another data type like number
to check for a type of value or data type, we make use of the keyword 'typeof'

ways to convert string to number
+'1' - using the plus symbol immediately
Number() - known as the number constructor, it takes a string of either integer characters or decimals and converts it to the number type.
parseInt() - this takes a string representation of number and coverts it to the number type.
parseFloat() - works the same way as parseInt, but the difference is, it converts string of number characters with a decimal.

ways to convert number to string
String() - the string constructor is used to convert number to string
toString() - this method is used to convert number to string as well


Control Flow
In every programming language there are certain ways to control the flow of the program and that includes
if statement
else statement
else-if statement
switch statement
while loop
do while loop

Logical Operators
Logical AND && - returns TRUE only if both operands/boolean values are TRUE, else it evaluates to FALSE
Logical OR || - returns TRUE if either of the operands/boolean values are TRUE, it only evaluates to FALSE when both operands/boolean values are FALSE 
Logical NOT ! - inversely returns the opposite of the either the operands/boolean value. NOT TRUE results to False and NOT FALSE results to TRUE.

Array
array is a data structure which we use in storing a list of elements and arrays is zero based which means the first element in the list is 0.
we can access an element in the array using the bracket notation with the number index inside the bracket


Array methods
concat() - joins two or more arrays and return a result
includes() - checks if an array contains a specified element
push() - add a new element to the end of an array and returns the new length of the array
unshift() - adds a new element to the beginning of the array and returns the new length of the array
pop() - removes the last element of an array and returns the removed element
shift() - removes the first element in an array and returns the removed element
sort() - sorts the elements alphabetically and in ascending order
slice() - select a part of the array and the return the new array
splice() - removes or replaces existing elements and/or adds new elements


Object
object is another data structure that allows us to store a collection of data and it store as a key-value pair. The key stands as a label to the value which can be of any data type including arrays and objects
we can access properties in an object using dot or bracket notation

Function
a function is a block of code that performs some specific task
functions make the code reusable, you can declare it once and use it multiple times
functions makes the code easier as each small tasks is divided into different functions
function increases readability
function encourages the DRY (Dont Repeat Yourself) principle

types of function
function declaration - this enables hoisting which means it can be called or executed before initialization
function nameOfFunction() { }

function expression - this can not be called before initialization because it will lead to reference error
const newFunction = function () { }

arrow function
const arrowFunction = () => { }

Callback Function
when we provide a function as an argument to a function, that function passed as the argument is known as a callback function

Scopes
scopes in javascript refers to the current context of code, which determines the accessibility of variables to javascript

Two types of Scopes
Local Scopes - this are variables declared inside a block of code, a block of code in mostly in curly braces
Global Scopes - this are variables declared outside a block of code

JSON
javascript object notation commonly known as JSON is a lightweight data interchange format that is easy for humans to read and write and also for machine to parse and generate
JSON is mostly used in transferring data betweem applications and servers

ways to work with JSON
JSON.stringify() - this is used to convert a regular javascript object to a JSON string format
JSON.parse() - this is used to convert a JSON string format to a javascript object

setInterval(function, timeInMilliseconds);
this is built-in function used to repeat and execute a block of code at a specified interval

setTimeOut(function, timeInMilliseconds)
this is also a built-in function used to execute a function or a block of code after a specified length


More on Template Strings as known as Template Literals
Template strings also know as template literals are a feature in javascript that allows us to create strings with embedded expressions. They are denoted by backticks `` instead of single or double quotes.
template strings provide a more flexible and concise way to construct strings, especially when they involve variables or expression. Embedding expressions in backticks is commonly known as interpolation

Arrow Function
Arrow function also known as fat arrow function, are a concise and shorter way to declare functions in Javascript.
They were introduced in the ECMAscript 6 (ES6) and provide a more compact syntax compared to traditional function expression.

Enhanced Object Literals, introduced in ECMAscript 6 (ES6), are a set of enhancement to the syntax for defining objects in javascript. These enhancements made it more convenient and concise to define object  properties and methods. (shorthand method)

Default functions parameters, introduced ECMAscript 6 (ES6), allow you to assign default values to function parameters. When a function is called and an argument is not provided for the respective parameter, the default value will used instead. This feature makes it easier to handle cases where argument might be missing or undefined.

Spread operator
the spread operator is a new addition to the set of operators in Javascript ES6 
It takes in an iterable (e.g array) and expand it into individual elements
The spread operator is used to make a shallow copies of JS objects
Using this operator makes our code more concise and enhances its readability

Rest operator
The rest parameter syntax allows a function to accept an indefinite number of arguments
as an array, providing a way to represent variadic functions in Javascript

Destructuring
Destructuring allows us to unpack values from data structures (arrays, objects) into seperate distinct variable
In object destructuring order doesnt matter but the name does matter


Ternary Operator
The ternary operator in javascript is a concise way of writing conditional expressions. It is the only javascript operator that takes three operand: a condition followed by a question mark (?), an expression to execute if the condition is true followed by a colon (:), and an expression to execute if the condition is false
// condition ? expIfTrue : expIfFalse;


The for-in loop
the for-in loop in javascript is used to iterate over the enumerable properties of an object. It is a way to loop through the keys (property names) of an object.
// for (let key in object) { }


The for-of loop
The for-of loop in javascript is a modern iteration statement introduced in ECMAscript 6 (ES6) that provides a concise and easy way to loop over elements in iterable objects like arrays, strings, maps, sets etc. It allows you to iterate directly over the values of the elements, rather than dealing with their indices or keys, which makes the code more readable and less error-prone
// for (variable of iterable) { }


Array helpers
forEach() - when we call forEach() helper we pass in anonymous callback function, this function gets called one time for every element in the array
whatever is inside the function, that logic happens

map() - the map method creates a new array populated with the results of calling a provided function on every element in the calling array.

filter() - the filter method is a built-in array method in Javascript that allows you to create a new array containing elements that pass a certain condition. it provides a clean and concise way to filter out elements from an array based on based on a specific criteria

find() - the find method is another built-in array helper in javascript that allows you to find the first element in an array that matches a specific condition. It returns the value of the first element that satisifes the given testing function or undefined if no element is found

The every() and some() methods in javascript that allows you to check the elements of an array based on a given condition. Both methods takes a callback function as an argument, which is applied to each element of the array 

every() - the every method tests whether all elements in the array pass the condition specified by the provided callback function. it return true if the callback function returns true for every element and false if any element fails the condition.

some() - the some method tests whether at least one element in the array passes the condition specified by the provided callback function. it returns true if the callback function returns true for at least one element and false if no element passes the condition

reduce() - the reduce method applies the reducer function to each element of an array, accumulating the result into a single value. it is often used to perform calculations or aggregations on array element and simplify the array into a single value


/*
        const words = [
            'apple',
            'banana',
            'orange',
            'banana',
            'apple',
            'orange',
            'apple',
            'grape'
        ];

        const wordFrequency = words.reduce((p, word) => {
            p[word] = p[word] || 0 + 1;
            return p;
        }, {});
        console.log(wordFrequency);
*/

More on data structure
Map is a built-in data structure introduced in ES6 that allows you to store key-value pairs where both the keys and values can be of any data type. It is similar to an object but with a few key differences
--> keys can be of any data type: unlike objects, where key are limited to strings and symbols. Map allows you to use any data type as keys including numbers, booleans, objects and even other map instances
--> maintains insertion order: map preserves the order of key-value pairs as they were inserted, while object keys may not be guranteed to be in a specific order
--> Iteration: map provides built-in methods for iteration over its elements

Set is a built-in data structure introduced in ES6 that represents a collection of unique values, unlike arrays, set allows you store only unique values, which means duplicate values are automatically removed. Each value can occur only once within a set 
--> set objects are useful when you need to store a list of unique elements and quickly check for the existence of a specific value 


More on data type
symbol - this is a unique and immutable data type introduced in ECMAscript 6 (ES6). A symbol is often used as an identifier for object properties to avoid potential naming conflict
--> unlike strings or numbers symbols are guaranteed to be unique. when you create a symbol, it is unique and can not be recreated or changed. this uniqueness ensures that symbols will not collide with other property names, even if they had the same string representation 


DOM
DOM - this stands for Document Object Model
--> when a web page is loaded, the browser creates a document object model of the page

Events in DOM
What is an Event?
Javascript interaction with HTML is handled through events that occur when the user or browser manipulates a page. 
When the page loads it is called an event. When the user clicks a button, that click too is an event

/*
------------------------------------------------------------------------------------------------------------
Animation
GSAP
The GSAP object serves as an accesspoint to most of GSAP functionalities.
Its a generic object with various properties and methods that creates and control Tweens and Timelines.
e.g gsap.method(element, vars object)

Tweens
A tween is just a single moment in animation

Set method
It is used to preset some propertise ahead of the animation

from and fromTo methods
from - in from method we dont need to specify the initial state, (it will figure it out by itself)
fromTo - you have to specify the default value and also the new animation state

Staggers

Controlling Tweens

Timelines
A timeline is a powerful sequencing tool that act as a container for tweens and other timelines, making it simple to control them as a whole and precisely manage their timing. Without timelines, building complex sequences would be far more cumbersome because you'd need to use a delay for every animation.
-----------------------------------------------------------------------------------------------------------
*/

Object Oriented Programming (O.O.P)
Object Oriented Programming is a programming language model / style organized around objects rather than actions and data rather than logic

Javascript is a versatile and dynamic programming language that supports multiple paradigms, including procedural, functional and object oriented programming. While Javascript is not a purely object oriented language like Java or C++, it provides the tools and features to implement OOP concepts effectively.

OOP in Javascript refers to the practice of designing and structuring code around objects and their interactions. It is a programming paradigm that allows developers to model real-world entities and their relationships using objects and classes.

keyword This
The javascript This keyword refers to the object it belongs to. It has different value depending on where it is used.
In a method - this refers to the owner object
Alone - this refers to the global object
In a function - this refers to the global object


Factory Function
A factory function is a type of function that is used to create and return object. Its a design pattern that provides an alternative way to create objects compared to using constructors and the 'new' keyword.

Constructor Function
Constructor function in Javascript are regular functions used with the new keyword to create and initialize objects with shared properties and methods. They act as blueprint for creating multiple instances of objects with the same structure and behavior.

new keyword
1. first create empty object {}
2. sets 'this' to point to that object
3. we can omit the return statement using the 'new' keyword


Built-in Constructors
Also known as native constructors, are standard constructors provided by Javascript that allows you to create objects of various data types. These constuctors are available globally and do not need to be explicitly defined. They provide a convenient way to create instances of primitive data types and built-in objects.


Object.create()
The Object.create() method creates a new object, using an existing object as the prototype of the newly created object.

Prototype
Every javascript object has an anonymous property called prototype
// remember functions and arrays are also an object
That prototype will be the parent of that object, prototype property is object by itself, which have some special properties and methods.

// Every object is associated with another object
// The object (a) is associated with [[Prototype]] object 
// -> which means a object will inherit all properties of Object.prototype || [[Prototype]]

We can check the prototype of objects or something in 3 ways
---> obj.__proto__
---> obj.constructor.prototype
---> object.getPrototypeOf(a)


Prototypal Inheritance
This is a mechanism in Javascript that allows objects to inherit properties and methods from other objects. It is a fundamental concept in the language and is based on the prototype model. In prototypal inheritance, objects can serve as prototypes for other objects, forming a hierachical chain of inheritance.

// In Javascript, every object has an internal property called [[Prototype]] (often referred to as __proto__), which points to its prototype object. When you access a property or method on an object, and that property or method is not found in the object itself, javascript looks for it in the object prototype (and further up in the prototype chain, if needed) until it finds the property or reaches the top of the prototype chain, which is usually the Object.prototype 


Classes
Classes are one of the features introduced in the ES6 version of Javascript.
// A class is blueprint for the object. You can create an object from the class
// You can think of the class as a sketch (prototype) of a house. It contains all the details about the floors, doors, windows etc. Based on these descriptions you build the house.
// Since many houses can be made from the same description, we can create many objects from a class.

Modifiers
Class modifiers, also known as access modifiers or visibility modifiers, are keywords in OOP that define the visibility and accessibility of class members (fields, methods and nested classes) from other parts of the program. They control the level of encapsulation and help enforce encapsulation principles by restricting direct access to certain class members.

In javascript class modifiers are used in the context of classes and objects, although javascript does not have traditional access modifiers like some other object-oriented language like (e.g Java). However you can achieve similar effect using different conventions and techniques.


/*
    OOP
    Encapsulaion
    Abstraction
    Inheritance
    Polymorphism
*/
Encapsulaion - is the concept of bundling data (properties) and methods (functions) together within an object, allowing the object to control access to its internal data and behavior. This helps to hide implementation details and expose only necessary interface to interact with the object. In Javascript, you can achieve encapsulation by using closures, symbols or naming conventions to simulate private members and expose public interfaces.

Abstraction - is the process of simplifying complex systems by breaking them down into smaller, manageable parts. It allows you to focus on the essential features of an object and hide unneccesary details. In javascript, you can use abstract classes to define abstract structures and then implement them in concrete objects.

Inheritance - allows a class to (subclass) to inherit properties and methods from another class (superclass). This enables code reuse and the creation of hierachical relationships between classes. In Javascript, inheritance can be achieved through prototype-based inheritance (before ES6) or using ES6 classes (with the extends keyword)

Polymorphism - allows objects to be treated as instances of their parent class, even if they are instances of a subclass. This facilitates writing code that works with different types of objects in a generic way. 
In javascript, polymorphism is achieved through method overriding, where a subclass provides its own implementation of a method that is already defined in the parent class. The code can then use the same method to work with both parent and subclass instances.



Synchronous and Asynchronous

Synchronous javascript refers to the traditional way of executing javascript code, where each operation is performed in a sequential and blocking manner. In other words, each line of code is executed one after the other, and the program will wait for each operation to finish before moving onto the next one. If an operation takes a long time to complete, it can potentially slow down the entire applicaiton, making it less responsive.

Asynchronous javascript allows certain operations to be executed indepently from the main program flow, so they dont block the execution of other tasks. This is typically achieved using techniques like callbacks, promises and async/await, which allow developers to handle asynchronous operations more efficiently.

Callback

Promises - A promise is an object representing the eventual completion or failure of an asynchronous operations.
new Promise() - A javascript promise object contains both the producing code and calls the consuming code it can be used to deal with asynchronous operation in Javascript.
A promise has 3 states
* Pending - initial state, not yet fulfilled or rejected
* Fulfilled / Resolved - promise completed 
* Rejected - promise failed
Promise syntax
new Promise ((resolve, reject) => { 
    // async code
    resolve(value);
    reject(error);
} )
.then() - is a method used to handle the successful outcome of a promise Javascript. 
 it takes two arguments: (onFulfilled, onRejectedd)
. catch() - the catch() method returns a Promise and deals with rejected case only


Async/Await
Async function?
Async is a special function that is designed to operate asynchronously, meaning it can perform tasks in the background while other code continues to execute. Async functions are marked with the async keyword.
Async keyword - this is a keyword used to turn function declaration to async function.
Await - the await operator is used to wait for a Promise. It can only be used inside an async function within regular Javascript code.



TRY AND CATCH
In Javascript, try and catch are keywords used to implement error handling. Error handling is essential when writing code to gracefully handle unexpected errors and exceptions that may occur during program execution. The try and catch block works together to enable developers to catch and handle errors, preventing them from crashing the entire application.